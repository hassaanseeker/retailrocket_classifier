name: Build, Push, and Deploy to Vertex

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    env:
      REGION: us-central1
      REPO_NAME: ml-repo
      ENDPOINT_NAME: retailrocket-endpoint
      MODEL_DISPLAY_NAME: retailrocket-classifier

    steps:
      # 1. Checkout
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Auth to GCP using service account key from GitHub Secrets
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      # 3. Install gcloud SDK + Vertex AI CLI surface
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
          export_default_credentials: true

      # 4. Configure Docker for Artifact Registry
      - name: Configure Docker auth for Artifact Registry
        run: gcloud auth configure-docker $REGION-docker.pkg.dev -q

      # 5. Build Docker image tagged with commit SHA
      - name: Build Docker image
        run: |
          IMAGE_URI=${{ env.REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/trainer:${{ github.sha }}
          echo "IMAGE_URI=$IMAGE_URI" | tee image_uri.txt
          docker build -t $IMAGE_URI .

      # 6. Push Docker image to Artifact Registry
      - name: Push Docker image
        run: |
          IMAGE_URI=${{ env.REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/trainer:${{ github.sha }}
          docker push $IMAGE_URI

      # 7. Register model in Vertex AI Model Registry
      - name: Upload model to Vertex AI
        run: |
          REGION=${{ env.REGION }}
          PROJECT_ID=${{ vars.GCP_PROJECT_ID }}
          IMAGE_URI=${{ env.REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/trainer:${{ github.sha }}

          # 1. Create dummy model artifact locally
          RUN_ID=${GITHUB_SHA}
          mkdir -p local_model_artifact
          echo "placeholder model for commit ${GITHUB_SHA}" > local_model_artifact/model.txt

          # 2. Define GCS location for this model version
          GCS_BUCKET="gs://my-ml-bucket-retailrocket"
          ARTIFACT_PREFIX="models/${RUN_ID}/model"
          ARTIFACT_GCS_DIR="${GCS_BUCKET}/${ARTIFACT_PREFIX}"
          echo "Uploading artifacts to ${ARTIFACT_GCS_DIR}"

          # 3. Upload local_model_artifact/* directly into gs://.../model/
          gsutil -m cp -r local_model_artifact/* "${ARTIFACT_GCS_DIR}/"

          echo "Contents we just uploaded:"
          gsutil ls -r "${ARTIFACT_GCS_DIR}"

          # 4. Register model with Vertex AI, now pointing to that GCS dir
          gcloud ai models upload \
            --region=${REGION} \
            --display-name="${{ env.MODEL_DISPLAY_NAME }}" \
            --container-image-uri="${IMAGE_URI}" \
            --container-predict-route="/predict" \
            --container-health-route="/health" \
            --artifact-uri="${ARTIFACT_GCS_DIR}" \
            --labels=commit_sha=${GITHUB_SHA},repo=retailrocket > upload_result.txt

          echo "[INFO] Model upload result:"
          cat upload_result.txt

          # 5. Grab model resource name we just created and store for next steps
          MODEL_ID=$(gcloud ai models list \
            --region=${REGION} \
            --filter="displayName=${{ env.MODEL_DISPLAY_NAME }}" \
            --format="value(name)" \
            | tail -n 1)

          echo "MODEL_ID=${MODEL_ID}" | tee model_id.txt

      # 8. Create endpoint if it doesn't exist yet
      - name: Ensure endpoint exists
        run: |
          # Try to find endpoint
          EP_ID=$(gcloud ai endpoints list \
            --region=${{ env.REGION }} \
            --filter="displayName=${{ env.ENDPOINT_NAME }}" \
            --format="value(name)" \
            | head -n 1)

          if [ -z "$EP_ID" ]; then
            echo "No endpoint found. Creating new endpoint ${{ env.ENDPOINT_NAME }} ..."
            EP_ID=$(gcloud ai endpoints create \
              --region=${{ env.REGION }} \
              --display-name=${{ env.ENDPOINT_NAME }} \
              --format="value(name)")
          else
            echo "Found endpoint: $EP_ID"
          fi

          echo "EP_ID=${EP_ID}" | tee endpoint_id.txt

      # 9. Deploy new model to the endpoint (100% traffic)
      - name: Deploy model to endpoint
        run: |
          MODEL_ID=$(cat model_id.txt | cut -d'=' -f2)
          EP_ID=$(cat endpoint_id.txt | cut -d'=' -f2)

          echo "Deploying MODEL_ID=$MODEL_ID to EP_ID=$EP_ID"

          # Remove previous deployed models? We'll just send 100% traffic to new one.
          # gcloud ai endpoints deploy-model will create a new deployedModel entry.
          gcloud ai endpoints deploy-model $EP_ID \
            --region=${{ env.REGION }} \
            --model=$MODEL_ID \
            --display-name="deploy-${GITHUB_SHA}" \
            --machine-type="n1-standard-2" \
            --traffic-split=0=100 \
            --min-replica-count=1 \
            --max-replica-count=1

